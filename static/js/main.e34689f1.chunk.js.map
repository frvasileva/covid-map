{"version":3,"sources":["CovidTableInfo.js","components/CustomMarker.js","MapWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["CovidTableInfo","CustomMarker","props","element","Marker","position","geometry","coordinates","Popup","className","src","properties","countryInfo","flag","country","active","toLocaleString","critical","todayCases","MapWrapper","data","covidData","useState","mapCenter","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","features","map","Circle","radius","activePerOneMillion","metric","fillOpacity","fillColor","stroke","App","geoJson","jsonDataState","setJsonData","a","leafletElement","axios","get","then","response","Array","isArray","length","type","lat","lng","long","console","log","message","useEffect","mapEffect","rrr","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e34689f1.chunk.js","sourcesContent":["import Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport \"./CovidTableInfo.scss\";\r\n\r\nfunction CovidTableInfo(props) {\r\n  var data = props.covidData;\r\n  data.features.sort((a, b) =>\r\n    a.properties.continent > b.properties.continent ? 1 : -1\r\n  );\r\n  data.features.sort((a, b) => (a.properties.continent != \"Europe\" ? 1 : -1));\r\n\r\n  const handleRowSelected = (lang, long) => {\r\n    props.handleRowSelected([lang, long]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"table-wrapper\">\r\n      <h2>Info by country:</h2>\r\n      <TableContainer component={Paper}>\r\n        <Table className=\"info-table\" aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Country</TableCell>\r\n              <TableCell align=\"right\">Ð¢oday Cases</TableCell>\r\n              <TableCell align=\"right\">Active(per milion)</TableCell>\r\n              <TableCell align=\"right\">Critical</TableCell>\r\n              <TableCell align=\"right\">Death</TableCell>\r\n              <TableCell align=\"right\">Tests</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.features.map((row) => (\r\n              <TableRow\r\n                key={row.properties.country}\r\n                onClick={() =>\r\n                  handleRowSelected(\r\n                    row.geometry.coordinates[1],\r\n                    row.geometry.coordinates[0]\r\n                  )\r\n                }\r\n              >\r\n                <TableCell\r\n                  component=\"th\"\r\n                  scope=\"row\"\r\n                  key={row.properties.country}\r\n                >\r\n                  <img\r\n                    src={row.properties.countryInfo.flag}\r\n                    className=\"country-flag\"\r\n                  />\r\n                  <strong>{row.properties.country}</strong>/\r\n                  {row.properties.continent}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  {row.properties.todayCases.toLocaleString()}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  {row.properties.active.toLocaleString()}\r\n                  <br />\r\n                  <span>Per million: </span>\r\n                  {row.properties.activePerOneMillion.toLocaleString()}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  {row.properties.cases.toLocaleString()}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  {row.properties.critical.toLocaleString()}\r\n                  <br />\r\n                  <span>Per million: </span>\r\n                  {row.properties.criticalPerOneMillion.toLocaleString()}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  {row.properties.deaths.toLocaleString()}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CovidTableInfo;\r\n","import { Marker, Popup } from \"react-leaflet\";\r\n\r\nfunction CustomMarker(props) {\r\n  var element = props.element;\r\n  return (\r\n    <Marker\r\n      position={[\r\n        element.geometry.coordinates[1],\r\n        element.geometry.coordinates[0],\r\n      ]}\r\n      key={\r\n        \"key\" +\r\n        (element.geometry.coordinates[1], element.geometry.coordinates[0])\r\n      }\r\n    >\r\n      <Popup\r\n        className=\"popup-covid-info\"\r\n        key={\r\n          \"popup\" +\r\n          (element.geometry.coordinates[1], element.geometry.coordinates[0])\r\n        }\r\n      >\r\n        <img\r\n          src={element.properties.countryInfo.flag}\r\n          className=\"popup-country-flag\"\r\n        />\r\n        {element.properties.country} <br />\r\n        <ul className=\"covid-info-list\">\r\n          <li className=\"item-info\">\r\n            <span>Active:</span>\r\n            <strong>{element.properties.active.toLocaleString()}</strong>\r\n          </li>\r\n          <li className=\"item-info\">\r\n            <span>Critical:</span>\r\n            <strong>{element.properties.critical.toLocaleString()}</strong>\r\n          </li>\r\n          <li className=\"item-info\">\r\n            <span>Today cases:</span>\r\n            <strong>{element.properties.todayCases.toLocaleString()}</strong>\r\n          </li>\r\n        </ul>\r\n      </Popup>\r\n    </Marker>\r\n  );\r\n}\r\n\r\nexport default CustomMarker;\r\n","import { MapContainer, TileLayer, Circle } from \"react-leaflet\";\r\nimport { useState } from \"react\";\r\nimport CustomMarker from \"./components/CustomMarker\";\r\nimport \"./MapWrapper.scss\";\r\n\r\nfunction MapWrapper(props) {\r\n  var data = props.covidData;\r\n  const [mapCenter] = useState(props.mapCenter);\r\n\r\n  if (!data) return <div></div>;\r\n  else\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <div className=\"wrapper\">\r\n              <MapContainer\r\n                center={mapCenter}\r\n                zoom={7}\r\n                scrollWheelZoom={true}\r\n                className=\"map-wrapper\"\r\n              >\r\n                <TileLayer\r\n                  attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {data.features.map((element) => (\r\n                  <div>\r\n                    <Circle\r\n                      center={[\r\n                        element.geometry.coordinates[1],\r\n                        element.geometry.coordinates[0],\r\n                      ]}\r\n                      radius={element.properties.activePerOneMillion}\r\n                      metric={true}\r\n                      fillOpacity={0.5}\r\n                      fillColor={\"red\"}\r\n                      stroke={false}\r\n                      key={\r\n                        (element.geometry.coordinates[1],\r\n                        element.geometry.coordinates[0])\r\n                      }\r\n                    />\r\n                    <CustomMarker element={element} />\r\n                  </div>\r\n                ))}\r\n              </MapContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default MapWrapper;\r\n","import \"./App.css\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport CovidTableInfo from \"./CovidTableInfo\";\n\nimport MapWrapper from \"./MapWrapper\";\nimport CovidDataGrid from \"./components/CovidDataGrid\";\n\nfunction App() {\n  const [jsonDataState, setJsonData] = useState(null);\n  const [mapCenter, setMapCenter] = useState([43, 25]);\n\n  var geoJson;\n\n  async function mapEffect({ leafletElement: map } = {}) {\n    let response;\n\n    try {\n      response = await axios\n        .get(\"https://corona.lmao.ninja/v2/countries\")\n        .then((response) => {\n          const { data = [] } = response;\n          const hasData = Array.isArray(data) && data.length > 0;\n          if (!hasData) return;\n\n          geoJson = {\n            type: \"FeatureCollection\",\n            features: data.map((country = {}) => {\n              const { countryInfo = {} } = country;\n              const { lat, long: lng } = countryInfo;\n              return {\n                type: \"Feature\",\n                properties: {\n                  ...country,\n                },\n                geometry: {\n                  type: \"Point\",\n                  coordinates: [lng, lat],\n                },\n              };\n            }),\n          };\n          setJsonData(geoJson);\n        });\n    } catch (e) {\n      console.log(`Failed to fetch countries: ${e.message}`, e);\n      return;\n    }\n  }\n  useEffect(() => {\n    mapEffect();\n  }, []);\n  try {\n    var rrr = axios\n      .get(\n        \"https://data.egov.bg/resource/download/e59f95dd-afde-43af-83c8-ea2916badd19/json\"\n      )\n      .then((response) => {\n        const { data = [] } = response;\n        const hasData = Array.isArray(data) && data.length > 0;\n        if (!hasData) return;\n        console.log(\"response\", rrr);\n      });\n  } catch (e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e);\n    return;\n  }\n\n \n\n  if (!jsonDataState) return <div>Loading...</div>;\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h1 className=\"app-title\">Covid information</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <MapWrapper covidData={jsonDataState} mapCenter={mapCenter} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}