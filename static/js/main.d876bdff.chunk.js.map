{"version":3,"sources":["components/CustomMarker.js","MapWrapper.js","components/CovidDataGrid.js","App.js","reportWebVitals.js","index.js"],"names":["CustomMarker","props","element","Marker","position","geometry","coordinates","Popup","className","src","properties","countryInfo","flag","country","active","toLocaleString","critical","todayCases","MapWrapper","data","covidData","useState","mapCenter","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","features","map","Circle","radius","activePerOneMillion","metric","fillOpacity","fillColor","stroke","CovidDataGrid","console","log","rowsData","item","i","id","continent","cases","style","height","width","rows","columns","field","headerName","autoPageSize","checkboxSelection","App","geoJson","jsonDataState","setJsonData","a","leafletElement","axios","get","then","response","Array","isArray","length","type","lat","lng","long","message","useEffect","mapEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d876bdff.chunk.js","sourcesContent":["import { Marker, Popup } from \"react-leaflet\";\r\n\r\nfunction CustomMarker(props) {\r\n  var element = props.element;\r\n  return (\r\n    <Marker\r\n      position={[\r\n        element.geometry.coordinates[1],\r\n        element.geometry.coordinates[0],\r\n      ]}\r\n      key={\r\n        \"key\" +\r\n        (element.geometry.coordinates[1], element.geometry.coordinates[0])\r\n      }\r\n    >\r\n      <Popup\r\n        className=\"popup-covid-info\"\r\n        key={\r\n          \"popup\" +\r\n          (element.geometry.coordinates[1], element.geometry.coordinates[0])\r\n        }\r\n      >\r\n        <img\r\n          src={element.properties.countryInfo.flag}\r\n          className=\"popup-country-flag\"\r\n        />\r\n        {element.properties.country} <br />\r\n        <ul className=\"covid-info-list\">\r\n          <li className=\"item-info\">\r\n            <span>Active:</span>\r\n            <strong>{element.properties.active.toLocaleString()}</strong>\r\n          </li>\r\n          <li className=\"item-info\">\r\n            <span>Critical:</span>\r\n            <strong>{element.properties.critical.toLocaleString()}</strong>\r\n          </li>\r\n          <li className=\"item-info\">\r\n            <span>Today cases:</span>\r\n            <strong>{element.properties.todayCases.toLocaleString()}</strong>\r\n          </li>\r\n        </ul>\r\n      </Popup>\r\n    </Marker>\r\n  );\r\n}\r\n\r\nexport default CustomMarker;\r\n","import { MapContainer, TileLayer, Circle } from \"react-leaflet\";\r\nimport { useState } from \"react\";\r\nimport CustomMarker from \"./components/CustomMarker\";\r\nimport \"./MapWrapper.scss\";\r\n\r\nfunction MapWrapper(props) {\r\n  var data = props.covidData;\r\n  const [mapCenter] = useState(props.mapCenter);\r\n\r\n  if (!data) return <div></div>;\r\n  else\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <div className=\"wrapper\">\r\n              <MapContainer\r\n                center={mapCenter}\r\n                zoom={7}\r\n                scrollWheelZoom={true}\r\n                className=\"map-wrapper\"\r\n              >\r\n                <TileLayer\r\n                  attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {data.features.map((element) => (\r\n                  <div>\r\n                    <Circle\r\n                      center={[\r\n                        element.geometry.coordinates[1],\r\n                        element.geometry.coordinates[0],\r\n                      ]}\r\n                      radius={element.properties.activePerOneMillion}\r\n                      metric={true}\r\n                      fillOpacity={0.5}\r\n                      fillColor={\"red\"}\r\n                      stroke={false}\r\n                      key={\r\n                        (element.geometry.coordinates[1],\r\n                        element.geometry.coordinates[0])\r\n                      }\r\n                    />\r\n                    <CustomMarker element={element} />\r\n                  </div>\r\n                ))}\r\n              </MapContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default MapWrapper;\r\n","import { DataGrid } from \"@material-ui/data-grid\";\r\n\r\nfunction CovidDataGrid(props) {\r\n  var data = props.covidData;\r\n  console.log(\"data\", data);\r\n  var rowsData = data.features.map((item, i) => {\r\n    return {\r\n      id: i,\r\n      flag: \"<img src='\" + item.properties.countryInfo.flag + \"'/>\",\r\n      country: item.properties.country,\r\n      continent: item.properties.continent,\r\n      active: item.properties.active,\r\n      todayCases: item.properties.todayCases,\r\n      cases: item.properties.cases,\r\n      critical: item.properties.critical,\r\n    };\r\n  });\r\n  console.log(\"rowsData \", rowsData);\r\n\r\n  const columns = [\r\n    { field: \"country\", headerName: \"Country\", width: 150 },\r\n    { field: \"continent\", headerName: \"Continent\", width: 150 },\r\n    { field: \"active\", headerName: \"Active\", width: 150 },\r\n    { field: \"todayCases\", headerName: \"Today cases\", width: 150 },\r\n    { field: \"cases\", headerName: \"Cases\", width: 150 },\r\n    { field: \"critical\", headerName: \"Critical\", width: 150 },\r\n  ];\r\n\r\n  return (\r\n    <div style={{ height: 600, width: \"100%\" }}>\r\n    <h2>Info by country:</h2>\r\n      <DataGrid\r\n        rows={rowsData}\r\n        columns={columns}\r\n        autoPageSize\r\n        checkboxSelection={false}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CovidDataGrid;\r\n","import \"./App.css\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport MapWrapper from \"./MapWrapper\";\nimport CovidDataGrid from \"./components/CovidDataGrid\";\n\nfunction App() {\n  const [jsonDataState, setJsonData] = useState(null);\n  const [mapCenter, setMapCenter] = useState([43, 25]);\n  var geoJson;\n\n  async function mapEffect({ leafletElement: map } = {}) {\n    try {\n      await axios\n        .get(\"https://corona.lmao.ninja/v2/countries\")\n        .then((response) => {\n          const { data = [] } = response;\n          const hasData = Array.isArray(data) && data.length > 0;\n          if (!hasData) return;\n\n          geoJson = {\n            type: \"FeatureCollection\",\n            features: data.map((country = {}) => {\n              const { countryInfo = {} } = country;\n              const { lat, long: lng } = countryInfo;\n              return {\n                type: \"Feature\",\n                properties: {\n                  ...country,\n                },\n                geometry: {\n                  type: \"Point\",\n                  coordinates: [lng, lat],\n                },\n              };\n            }),\n          };\n          setJsonData(geoJson);\n        });\n    } catch (e) {\n      console.log(`Failed to fetch countries: ${e.message}`, e);\n      return;\n    }\n  }\n\n  useEffect(() => {\n    mapEffect();\n  }, []);\n\n  if (!jsonDataState) return <div>Loading...</div>;\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h1 className=\"app-title\">Covid information by countries</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <MapWrapper covidData={jsonDataState} mapCenter={mapCenter} />\n            <br />\n            <CovidDataGrid covidData={jsonDataState} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}